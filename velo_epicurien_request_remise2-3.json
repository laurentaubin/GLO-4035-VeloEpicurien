{
	"info": {
		"_postman_id": "d2015bc3-23a8-4f59-b43f-be2972a8f2e5",
		"name": "glo-4035 Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Remise2",
			"item": [
				{
					"name": "Heartbeat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"heartbeat - villeChoisie - 0.5\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"villeChoisie\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/heartbeat",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"heartbeat"
							]
						}
					},
					"response": []
				},
				{
					"name": "Extracted Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"extracted - property nbRestaurant - 0.25\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"nbRestaurants\");",
									"});",
									"",
									"pm.test(\"extracted - nbRestaurant > 0 - 0.25\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nbRestaurants).to.be.gt(0);",
									"});",
									"",
									"pm.test(\"extracted - property nbSegments - 0.25\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"nbSegments\");",
									"});",
									"",
									"pm.test(\"extracted - nbSegment > 0 - 0.25\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nbSegments).to.be.gt(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/extracted_data",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"extracted_data"
							]
						}
					},
					"response": []
				},
				{
					"name": "Transformed Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"transformed - property restaurants - 0.25\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"restaurants\");",
									"});",
									"",
									"pm.test(\"transformed - restaurant is array - 0.25\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.restaurants).to.be.an('object');",
									"});",
									"",
									"pm.test(\"transformed - restaurant had > 1 type - 0.25\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(Object.keys(jsonData.restaurants).count()).to.be.gt(1);",
									"});",
									"",
									"pm.test(\"transformed - property longueurCyclable - 0.25\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"longueurCyclable\");",
									"});",
									"",
									"pm.test(\"transformed - longueurCyclable > 0 - 0.50\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.longueurCyclable).to.be.gt(0);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/transformed_data",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"transformed_data"
							]
						}
					},
					"response": []
				}
			],
			"description": "Test pour la remise 2"
		},
		{
			"name": "Remise3",
			"item": [
				{
					"name": "getLongueurCyclable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"setGetLongueurCyclable\", function(){",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.longueurCyclable).to.be.gt(0);",
									"pm.globals.set(\"longueurCyclable\",jsonData.longueurCyclable )",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/transformed_data",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"transformed_data"
							]
						}
					},
					"response": []
				},
				{
					"name": "Readme",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"readme - 0.25\", function () {",
									"    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/readme",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"readme"
							]
						}
					},
					"response": []
				},
				{
					"name": "Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"type - 5 types de restaurants\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.gte(5);",
									"    pm.globals.set(\"restaurantList\", jsonData);",
									"});",
									"",
									"pm.test(\"type - Les types de restaurants sont des string\", function () {",
									"    pm.expect(pm.globals.get(\"restaurantList\")[0]).to.be.string",
									"    pm.expect(pm.globals.get(\"restaurantList\")[2]).to.be.string",
									"    pm.expect(pm.globals.get(\"restaurantList\")[4]).to.be.string",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/type",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"type"
							]
						}
					},
					"response": []
				},
				{
					"name": "StartingPoint 1-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"starting-point - Valid geopoint\", function () {",
									"    var jsonData = pm.response.json();",
									"    var startingPoint = jsonData[\"startingPoint\"];",
									"    pm.expect(startingPoint.type).to.eql(\"Point\");",
									"    pm.expect(startingPoint.coordinates[0]).to.be.an(\"number\");",
									"    pm.expect(startingPoint.coordinates[1]).to.be.an(\"number\");",
									"",
									"    pm.globals.set(\"startingPoint1-1\",JSON.stringify(startingPoint))",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"allRestaurantType = pm.globals.get(\"restaurantList\")",
									"nbRestaurantsType = allRestaurantType.length",
									"randomRestaurantArray = [",
									"    allRestaurantType[Math.floor(Math.random() * nbRestaurantsType)],",
									"    allRestaurantType[Math.floor(Math.random() * nbRestaurantsType)],",
									"    allRestaurantType[Math.floor(Math.random() * nbRestaurantsType)]",
									"    ]",
									"",
									"pm.globals.set(\"randomRestaurantType-1\",JSON.stringify(randomRestaurantArray))",
									"",
									"",
									"",
									"lenghts = [5000, 7500, 10000, 12000, 8000, 15000]",
									"randomLength = lenghts[Math.floor(Math.random() * lenghts.length)];",
									"",
									"pm.globals.set(\"randomLength-1\",randomLength)",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\":{{randomRestaurantType-1}},\n    \"length\":{{randomLength-1}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/starting_point",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"starting_point"
							]
						}
					},
					"response": []
				},
				{
					"name": "StartingPoint 1-2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"starting-point - Valid geopoint\", function () {",
									"    var jsonData = pm.response.json();",
									"    var startingPoint = jsonData[\"startingPoint\"];",
									"    pm.expect(startingPoint.type).to.eql(\"Point\");",
									"    pm.expect(startingPoint.coordinates[0]).to.be.an(\"number\");",
									"    pm.expect(startingPoint.coordinates[1]).to.be.an(\"number\");",
									"",
									"    pm.globals.set(\"startingPoint1-2\",JSON.stringify(startingPoint))",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\":{{randomRestaurantType-1}},\n    \"length\":{{randomLength-1}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/starting_point",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"starting_point"
							]
						}
					},
					"response": []
				},
				{
					"name": "StartingPoint 1-3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"starting-point - Valid geopoint\", function () {",
									"    var jsonData = pm.response.json();",
									"    var startingPoint = jsonData[\"startingPoint\"];",
									"    pm.expect(startingPoint.type).to.eql(\"Point\");",
									"    pm.expect(startingPoint.coordinates[0]).to.be.an(\"number\");",
									"    pm.expect(startingPoint.coordinates[1]).to.be.an(\"number\");",
									"",
									"    pm.globals.set(\"startingPoint1-3\",JSON.stringify(startingPoint))",
									"});",
									"",
									"pm.test(\"starting-point - Random geopoint\", function () {",
									"    startintPoint1 = pm.globals.get(\"startingPoint1-1\")",
									"    startintPoint2 = pm.globals.get(\"startingPoint1-2\")",
									"    startintPoint3 = pm.globals.get(\"startingPoint1-3\")",
									"    ",
									"    is1and2theSame = startintPoint1 == startintPoint2",
									"    is2nd3theSame = startintPoint2 == startintPoint3",
									"    is1nd3theSame = startintPoint1 == startintPoint3",
									"",
									"    pm.expect(is1and2theSame & is2nd3theSame & is1nd3theSame).to.be.eq(0);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\":{{randomRestaurantType-1}},\n    \"length\":{{randomLength-1}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/starting_point",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"starting_point"
							]
						}
					},
					"response": []
				},
				{
					"name": "StartingPoint 2-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"starting-point - Valid geopoint\", function () {",
									"    var jsonData = pm.response.json();",
									"    var startingPoint = jsonData[\"startingPoint\"];",
									"    pm.expect(startingPoint.type).to.eql(\"Point\");",
									"    pm.expect(startingPoint.coordinates[0]).to.be.an(\"number\");",
									"    pm.expect(startingPoint.coordinates[1]).to.be.an(\"number\");",
									"",
									"    pm.globals.set(\"startingPoint2-1\",JSON.stringify(startingPoint))",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"allRestaurantType = pm.globals.get(\"restaurantList\")",
									"nbRestaurantsType = allRestaurantType.length",
									"randomRestaurantArray = [",
									"    allRestaurantType[Math.floor(Math.random() * nbRestaurantsType)],",
									"    allRestaurantType[Math.floor(Math.random() * nbRestaurantsType)],",
									"    allRestaurantType[Math.floor(Math.random() * nbRestaurantsType)]",
									"    ]",
									"",
									"pm.globals.set(\"randomRestaurantType-2\",JSON.stringify(randomRestaurantArray))",
									"",
									"",
									"",
									"lenghts = [5000, 7500, 10000, 12000, 8000, 15000]",
									"randomLength = lenghts[Math.floor(Math.random() * lenghts.length)];",
									"",
									"pm.globals.set(\"randomLength-2\",randomLength)",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\":{{randomRestaurantType-2}},\n    \"length\":{{randomLength-2}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/starting_point",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"starting_point"
							]
						}
					},
					"response": []
				},
				{
					"name": "StartingPoint 2-2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"starting-point - Valid geopoint\", function () {",
									"    var jsonData = pm.response.json();",
									"    var startingPoint = jsonData[\"startingPoint\"];",
									"    pm.expect(startingPoint.type).to.eql(\"Point\");",
									"    pm.expect(startingPoint.coordinates[0]).to.be.an(\"number\");",
									"    pm.expect(startingPoint.coordinates[1]).to.be.an(\"number\");",
									"",
									"    pm.globals.set(\"startingPoint2-2\",JSON.stringify(startingPoint))",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\":{{randomRestaurantType-2}},\n    \"length\":{{randomLength-2}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/starting_point",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"starting_point"
							]
						}
					},
					"response": []
				},
				{
					"name": "StartingPoint 2-3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"starting-point - Valid geopoint\", function () {",
									"    var jsonData = pm.response.json();",
									"    var startingPoint = jsonData[\"startingPoint\"];",
									"    pm.expect(startingPoint.type).to.eql(\"Point\");",
									"    pm.expect(startingPoint.coordinates[0]).to.be.an(\"number\");",
									"    pm.expect(startingPoint.coordinates[1]).to.be.an(\"number\");",
									"",
									"    pm.globals.set(\"startingPoint2-3\",JSON.stringify(startingPoint))",
									"});",
									"",
									"pm.test(\"starting-point - Random geopoint - Prise 2\", function () {",
									"    startintPoint1 = pm.globals.get(\"startingPoint2-1\")",
									"    startintPoint2 = pm.globals.get(\"startingPoint2-2\")",
									"    startintPoint3 = pm.globals.get(\"startingPoint2-3\")",
									"    ",
									"    is1and2theSame = startintPoint1 == startintPoint2",
									"    is2nd3theSame = startintPoint2 == startintPoint3",
									"    is1nd3theSame = startintPoint1 == startintPoint3",
									"",
									"    pm.expect(is1and2theSame & is2nd3theSame & is1nd3theSame).to.be.eq(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\":{{randomRestaurantType-2}},\n    \"length\":{{randomLength-2}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/starting_point",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"starting_point"
							]
						}
					},
					"response": []
				},
				{
					"name": "StartingPoint - Error Handling - 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"starting-point - L'erreur est attrapée\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"starting-point - L'erreur est expliquée\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"length\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\":{{randomRestaurantType-1}},\n    \"length\":\"badValue\"\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/starting_point",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"starting_point"
							]
						}
					},
					"response": []
				},
				{
					"name": "StartingPoint - Error Handling - 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"starting-point - L'erreur est attrapée\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"starting-point - L'erreur est expliquée\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\":\"badValue\",\n    \"length\":{{randomLength-1}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/starting_point",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"starting_point"
							]
						}
					},
					"response": []
				},
				{
					"name": "StartingPoint - Error Handling - 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"starting-point - L'erreur est attrapée\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"starting-point - L'erreur est expliquée\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\":[323],\n    \"length\":{{randomLength-1}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/starting_point",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"starting_point"
							]
						}
					},
					"response": []
				},
				{
					"name": "StartingPoint - Error Handling - 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"starting-point - L'erreur est attrapée\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"starting-point - L'erreur est expliquée\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"type\");",
									"});",
									"",
									"pm.test(\"starting-point - L'erreur est expliquée\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"length\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\":[3321]\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/starting_point",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"starting_point"
							]
						}
					},
					"response": []
				},
				{
					"name": "Parcours",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"parcours - Feature Collection Vide\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.type).to.eql(\"FeatureCollection\");",
									"    pm.expect(jsonData.features).is.an(\"Array\");",
									"});",
									"",
									"pm.test(\"parcours - Retourne un parcours\", function () {",
									"    var parcours = pm.response.json().features;",
									"    pm.expect(parcours.length).is.gte(2);",
									"    lineFound = false;",
									"    pointFound = false;",
									"",
									"    for (let i = 0; i < parcours.length; i++) {",
									"        if(parcours[i].geometry.type == \"MultiLineString\" || parcours[i].geometry.type == \"LineString\"){        ",
									"            lineFound=true;",
									"        }else if(parcours[i].geometry.type == \"Point\"){",
									"            pointFound=true;",
									"        }",
									"    }",
									"    ",
									"    pm.expect(lineFound & pointFound).to.eq(1);  ",
									"});",
									"",
									"",
									"pm.test(\"parcours - Retourne un parcours de la bonne longueur\", function () {",
									"    var parcoursDesiredLength = pm.globals.get(\"parcoursLength\")",
									"    var parcoursLenghtReel = 0 ",
									"    var parcours = pm.response.json().features;",
									"",
									"    for (let i = 0; i < parcours.length; i++) {",
									"        if(parcours[i].geometry.type == \"MultiLineString\" || parcours[i].geometry.type == \"LineString\"){",
									"            parcoursLenghtReel += parcours[i].properties.length",
									"        }",
									"    }",
									"    ",
									"    pm.expect(parcoursLenghtReel).to.gte((1-0.10)*parcoursDesiredLength);  ",
									"    pm.expect(parcoursLenghtReel).to.lte((1+0.10)*parcoursDesiredLength);  ",
									"});",
									"",
									"",
									"pm.test(\"parcours - Retourne un parcours avec le bons nombre d'arrêts\", function () {",
									"    var parcoursDesiredMaxNumberOfStops = pm.globals.get(\"parcoursNumberOfStops\")",
									"    var parcoursNumberOfStops = 0 ",
									"    var parcours = pm.response.json().features;",
									"",
									"    for (let i = 0; i < parcours.length; i++) {        ",
									"        if(parcours[i].geometry.type == \"Point\"){",
									"            parcoursNumberOfStops += 1",
									"        }",
									"    }",
									"    ",
									"    pm.expect(parcoursNumberOfStops).to.lte(parcoursDesiredMaxNumberOfStops);  ",
									"});",
									"",
									"",
									"pm.test(\"parcours - Retourne un parcours avec le bons types de restaurants\", function () {",
									"    ",
									"    var parcoursDesiredtype = new Set(JSON.parse(pm.globals.get(\"parcoursRestaurantType\")))",
									"    var parcoursTypes = new Set()",
									"    var parcours = pm.response.json().features;",
									"    ",
									"    for (let i = 0; i < parcours.length; i++) {    ",
									"        if(parcours[i].geometry.type == \"Point\"){",
									"            if(typeof(parcours[i].properties.type)==\"string\"){",
									"                parcoursTypes.add(parcours[i].properties.type)",
									"            }else if(typeof(parcours[i].properties.type)==\"object\"){",
									"                for(let j=0; j<parcours[i].properties.type.length; j++){",
									"                    parcoursTypes.add(parcours[i].properties.type[j])",
									"                }",
									"            } ",
									"        }",
									"    }",
									"    desiredVisitedTypes = parcoursTypes.intersection(parcoursDesiredtype)",
									"    ",
									"    pm.expect(desiredVisitedTypes.size).to.gt(0);  ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var run",
									"var iteration",
									"",
									"runRandom = Math.random();",
									"if(runRandom>0.5){",
									"    run = 2;",
									"}else{",
									"    run = 1;",
									"}",
									"",
									"var iterationRandom = Math.random();",
									"",
									"if(iterationRandom<0.33){",
									"    iteration = 1;",
									"}else if(iterationRandom>0.67){",
									"    iteration = 3;",
									"}else{",
									"    iteration = 2;",
									"}",
									"",
									"targetRestaurantTypeVariable = \"randomRestaurantType-\" + run",
									"targetLengthVariable = \"randomLength-\" + run",
									"targetStartingPointVariable = \"startingPoint\" + run + \"-\" + iteration",
									"",
									"restaurantType = pm.globals.get(targetRestaurantTypeVariable)",
									"length = pm.globals.get(targetLengthVariable)",
									"startingPoint = pm.globals.get(targetStartingPointVariable)",
									"",
									"pm.globals.set(\"parcoursRestaurantType\", restaurantType)",
									"pm.globals.set(\"parcoursLength\", length)",
									"pm.globals.set(\"parcoursStartingPoint\", startingPoint)",
									"pm.globals.set(\"parcoursNumberOfStops\", 10)",
									"",
									"Set.prototype.intersection = function(otherSet) ",
									"{ ",
									"    // creating new set to store intersection ",
									"    var intersectionSet = new Set(); ",
									"  ",
									"    // Iterate over the values  ",
									"    for(var elem of otherSet) ",
									"    { ",
									"        // if the other set contains a  ",
									"        // similar value as of value[i] ",
									"        // then add it to intersectionSet ",
									"        if(this.has(elem)) ",
									"            intersectionSet.add(elem); ",
									"    } ",
									"  ",
									"// return values of intersectionSet ",
									"return intersectionSet;                 ",
									"} "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\":{{parcoursRestaurantType}},\n    \"length\":{{parcoursLength}},\n    \"startingPoint\":{{parcoursStartingPoint}},\n    \"numberOfStops\":{{parcoursNumberOfStops}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/parcours",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"parcours"
							]
						}
					},
					"response": []
				},
				{
					"name": "Parcours - Error Handling - 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"parcours - L'erreur est attrapée\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"parcours - L'erreur est expliquée\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"type\");",
									"});",
									"",
									"pm.test(\"parcours - L'erreur est expliquée\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"length\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var run",
									"var iteration",
									"",
									"runRandom = Math.random();",
									"if(runRandom>0.5){",
									"    run = 2;",
									"}else{",
									"    run = 1;",
									"}",
									"",
									"var iterationRandom = Math.random();",
									"",
									"if(iterationRandom<0.33){",
									"    iteration = 1;",
									"}else if(iterationRandom>0.67){",
									"    iteration = 3;",
									"}else{",
									"    iteration = 2;",
									"}",
									"",
									"targetRestaurantTypeVariable = \"randomRestaurantType-\" + run",
									"targetLengthVariable = \"randomLength-\" + run",
									"targetStartingPointVariable = \"startingPoint\" + run + \"-\" + iteration",
									"",
									"restaurantType = pm.globals.get(targetRestaurantTypeVariable)",
									"length = pm.globals.get(targetLengthVariable)",
									"startingPoint = pm.globals.get(targetStartingPointVariable)",
									"",
									"pm.globals.set(\"parcoursRestaurantType\", restaurantType)",
									"pm.globals.set(\"parcoursLength\", length)",
									"pm.globals.set(\"parcoursStartingPoint\", startingPoint)",
									"pm.globals.set(\"parcoursNumberOfStops\", 10)",
									"",
									"Set.prototype.intersection = function(otherSet) ",
									"{ ",
									"    // creating new set to store intersection ",
									"    var intersectionSet = new Set(); ",
									"  ",
									"    // Iterate over the values  ",
									"    for(var elem of otherSet) ",
									"    { ",
									"        // if the other set contains a  ",
									"        // similar value as of value[i] ",
									"        // then add it to intersectionSet ",
									"        if(this.has(elem)) ",
									"            intersectionSet.add(elem); ",
									"    } ",
									"  ",
									"// return values of intersectionSet ",
									"return intersectionSet;                 ",
									"} "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\":[123],\n    \"length\":\"badValue\",\n    \"startingPoint\":{{parcoursStartingPoint}},\n    \"numberOfStops\":{{parcoursNumberOfStops}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/parcours",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"parcours"
							]
						}
					},
					"response": []
				},
				{
					"name": "Parcours - Error Handling - 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"parcours - L'erreur est attrapée\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"parcours - L'erreur est expliquée\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"startingPoint\");",
									"});",
									"",
									"pm.test(\"parcours - L'erreur est expliquée\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"numberOfStops\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var run",
									"var iteration",
									"",
									"runRandom = Math.random();",
									"if(runRandom>0.5){",
									"    run = 2;",
									"}else{",
									"    run = 1;",
									"}",
									"",
									"var iterationRandom = Math.random();",
									"",
									"if(iterationRandom<0.33){",
									"    iteration = 1;",
									"}else if(iterationRandom>0.67){",
									"    iteration = 3;",
									"}else{",
									"    iteration = 2;",
									"}",
									"",
									"targetRestaurantTypeVariable = \"randomRestaurantType-\" + run",
									"targetLengthVariable = \"randomLength-\" + run",
									"targetStartingPointVariable = \"startingPoint\" + run + \"-\" + iteration",
									"",
									"restaurantType = pm.globals.get(targetRestaurantTypeVariable)",
									"length = pm.globals.get(targetLengthVariable)",
									"startingPoint = pm.globals.get(targetStartingPointVariable)",
									"",
									"pm.globals.set(\"parcoursRestaurantType\", restaurantType)",
									"pm.globals.set(\"parcoursLength\", length)",
									"pm.globals.set(\"parcoursStartingPoint\", startingPoint)",
									"pm.globals.set(\"parcoursNumberOfStops\", 10)",
									"",
									"Set.prototype.intersection = function(otherSet) ",
									"{ ",
									"    // creating new set to store intersection ",
									"    var intersectionSet = new Set(); ",
									"  ",
									"    // Iterate over the values  ",
									"    for(var elem of otherSet) ",
									"    { ",
									"        // if the other set contains a  ",
									"        // similar value as of value[i] ",
									"        // then add it to intersectionSet ",
									"        if(this.has(elem)) ",
									"            intersectionSet.add(elem); ",
									"    } ",
									"  ",
									"// return values of intersectionSet ",
									"return intersectionSet;                 ",
									"} "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\":{{parcoursRestaurantType}},\n    \"length\":{{parcoursLength}},\n    \"startingPoint\":\"startingPoint\",\n    \"numberOfStops\":\"badValue\"\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/parcours",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"parcours"
							]
						}
					},
					"response": []
				},
				{
					"name": "Parcours - Error Handling - 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"parcours - L'erreur est attrapée\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"pm.test(\"parcours - L'erreur est expliquée\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"length\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"longueurCyclable = pm.globals.get(\"longueurCyclable\")",
									"longueurCyclableImpossible = Math.floor(longueurCyclable * 1.15)",
									"pm.globals.set(\"longueurCyclableImpossible\", longueurCyclableImpossible)",
									"console.log(longueurCyclableImpossible)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\":{{parcoursRestaurantType}},\n    \"length\":{{longueurCyclableImpossible}},\n    \"startingPoint\":{{parcoursStartingPoint}},\n    \"numberOfStops\":{{parcoursNumberOfStops}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/parcours",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"parcours"
							]
						}
					},
					"response": []
				},
				{
					"name": "Parcours - Error Handling - 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"parcours - L'erreur est attrapée\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"parcours - L'erreur est expliquée\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var run",
									"var iteration",
									"",
									"runRandom = Math.random();",
									"if(runRandom>0.5){",
									"    run = 2;",
									"}else{",
									"    run = 1;",
									"}",
									"",
									"var iterationRandom = Math.random();",
									"",
									"if(iterationRandom<0.33){",
									"    iteration = 1;",
									"}else if(iterationRandom>0.67){",
									"    iteration = 3;",
									"}else{",
									"    iteration = 2;",
									"}",
									"",
									"targetRestaurantTypeVariable = \"randomRestaurantType-\" + run",
									"targetLengthVariable = \"randomLength-\" + run",
									"targetStartingPointVariable = \"startingPoint\" + run + \"-\" + iteration",
									"",
									"restaurantType = pm.globals.get(targetRestaurantTypeVariable)",
									"length = pm.globals.get(targetLengthVariable)",
									"startingPoint = pm.globals.get(targetStartingPointVariable)",
									"",
									"pm.globals.set(\"parcoursRestaurantType\", restaurantType)",
									"pm.globals.set(\"parcoursLength\", length)",
									"pm.globals.set(\"parcoursStartingPoint\", startingPoint)",
									"pm.globals.set(\"parcoursNumberOfStops\", 10)",
									"",
									"Set.prototype.intersection = function(otherSet) ",
									"{ ",
									"    // creating new set to store intersection ",
									"    var intersectionSet = new Set(); ",
									"  ",
									"    // Iterate over the values  ",
									"    for(var elem of otherSet) ",
									"    { ",
									"        // if the other set contains a  ",
									"        // similar value as of value[i] ",
									"        // then add it to intersectionSet ",
									"        if(this.has(elem)) ",
									"            intersectionSet.add(elem); ",
									"    } ",
									"  ",
									"// return values of intersectionSet ",
									"return intersectionSet;                 ",
									"} "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\":[\"typeDeRestaurantQuiNestPasDansLaBD\"],\n    \"length\":{{parcoursLength}},\n    \"startingPoint\":{{parcoursStartingPoint}},\n    \"numberOfStops\":{{parcoursNumberOfStops}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/parcours",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"parcours"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}